Pipeline examples# Checking that Redis is running# Creating a pipeline instance# This example show quickly how to use pipelines in redis-py. The responses of the three commands are stored in a list. In the above example, the two first boolean indicates that the set commands were successful and the last element of the list is the result of the get("a") comand. The same result as above can be obtained in one line of code by chaining the opperations. Using pipelines can improve performance, for more informations, see Redis documentation about pipelining. Here is a simple comparison test of performance between basic and pipelined commands (we simply increment a value and measure the time taken by both method). Using pipelines provides the same result in much less time.  importredisr=redis.Redis(decode_responses=True)r.ping()    pipe=r.pipeline()  pipe.set("a","a value")pipe.set("b","b value")pipe.get("a")    pipe.execute()    pipe=r.pipeline()pipe.set("a","a value").set("b","b value").get("a").execute()    fromdatetimeimportdatetimeincr_value=100000  r.set("incr_key","0")start=datetime.now()for_inrange(incr_value):r.incr("incr_key")res_without_pipeline=r.get("incr_key")time_without_pipeline=(datetime.now()-start).total_seconds()  print("Without pipeline")print("================")print("Time taken: ",time_without_pipeline)print("Increment value: ",res_without_pipeline)   r.set("incr_key","0")start=datetime.now()pipe=r.pipeline()for_inrange(incr_value):pipe.incr("incr_key")pipe.get("incr_key")res_with_pipeline=pipe.execute()[-1]time_with_pipeline=(datetime.now()-start).total_seconds()  print("With pipeline")print("=============")print("Time taken: ",time_with_pipeline)print("Increment value: ",res_with_pipeline)   Checking that Redis is running#  importredisr=redis.Redis(decode_responses=True)r.ping()    Simple example# Creating a pipeline instance# The responses of the three commands are stored in a list. In the above example, the two first boolean indicates that the set commands were successful and the last element of the list is the result of the get("a") comand.  pipe=r.pipeline()  pipe.set("a","a value")pipe.set("b","b value")pipe.get("a")    pipe.execute()    Creating a pipeline instance#  pipe=r.pipeline()  Adding commands to the pipeline#  pipe.set("a","a value")pipe.set("b","b value")pipe.get("a")    Executing the pipeline# The responses of the three commands are stored in a list. In the above example, the two first boolean indicates that the set commands were successful and the last element of the list is the result of the get("a") comand.  pipe.execute()    Chained call# The same result as above can be obtained in one line of code by chaining the opperations.  pipe=r.pipeline()pipe.set("a","a value").set("b","b value").get("a").execute()    Performance comparison# Without pipeline# Using pipelines can improve performance, for more informations, see Redis documentation about pipelining. Here is a simple comparison test of performance between basic and pipelined commands (we simply increment a value and measure the time taken by both method). Using pipelines provides the same result in much less time.  fromdatetimeimportdatetimeincr_value=100000  r.set("incr_key","0")start=datetime.now()for_inrange(incr_value):r.incr("incr_key")res_without_pipeline=r.get("incr_key")time_without_pipeline=(datetime.now()-start).total_seconds()  print("Without pipeline")print("================")print("Time taken: ",time_without_pipeline)print("Increment value: ",res_without_pipeline)   r.set("incr_key","0")start=datetime.now()pipe=r.pipeline()for_inrange(incr_value):pipe.incr("incr_key")pipe.get("incr_key")res_with_pipeline=pipe.execute()[-1]time_with_pipeline=(datetime.now()-start).total_seconds()  print("With pipeline")print("=============")print("Time taken: ",time_with_pipeline)print("Increment value: ",res_with_pipeline)   Without pipeline#  r.set("incr_key","0")start=datetime.now()for_inrange(incr_value):r.incr("incr_key")res_without_pipeline=r.get("incr_key")time_without_pipeline=(datetime.now()-start).total_seconds()  print("Without pipeline")print("================")print("Time taken: ",time_without_pipeline)print("Increment value: ",res_without_pipeline)   With pipeline# Using pipelines provides the same result in much less time.  r.set("incr_key","0")start=datetime.now()pipe=r.pipeline()for_inrange(incr_value):pipe.incr("incr_key")pipe.get("incr_key")res_with_pipeline=pipe.execute()[-1]time_with_pipeline=(datetime.now()-start).total_seconds()  print("With pipeline")print("=============")print("Time taken: ",time_with_pipeline)print("Increment value: ",res_with_pipeline)   