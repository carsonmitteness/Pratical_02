Tutorial¶ Prerequisites¶ This tutorial is intended as an introduction to working with
MongoDB and PyMongo. Before we start, make sure that you have the PyMongo distribution
installed. In the Python shell, the following
should run without raising an exception: This tutorial also assumes that a MongoDB instance is running on the
default host and port. Assuming you have downloaded and installed MongoDB, you
can start it like so: The first step when working with PyMongo is to create a
MongoClient to the running mongod
instance. Doing so is easy: The above code will connect on the default host and port. We can also
specify the host and port explicitly, as follows: Or use the MongoDB URI format: A single instance of MongoDB can support multiple independent
databases. When
working with PyMongo you access databases using attribute style access
on MongoClient instances: If your database name is such that using attribute style access won’t
work (like test-database), you can use dictionary style access
instead: A collection is a
group of documents stored in MongoDB, and can be thought of as roughly
the equivalent of a table in a relational database. Getting a
collection in PyMongo works the same as getting a database: or (using dictionary style access): An important note about collections (and databases) in MongoDB is that
they are created lazily - none of the above commands have actually
performed any operations on the MongoDB server. Collections and
databases are created when the first document is inserted into them. Data in MongoDB is represented (and stored) using JSON-style
documents. In PyMongo we use dictionaries to represent documents. As
an example, the following dictionary might be used to represent a blog
post: Note that documents can contain native Python types (like
datetime.datetime instances) which will be automatically
converted to and from the appropriate BSON types. To insert a document into a collection we can use the
insert_one() method: When a document is inserted a special key, "_id", is automatically
added if the document doesn’t already contain an "_id" key. The value
of "_id" must be unique across the
collection. insert_one() returns an
instance of InsertOneResult. For more information
on "_id", see the documentation on _id. After inserting the first document, the posts collection has
actually been created on the server. We can verify this by listing all
of the collections in our database: The most basic type of query that can be performed in MongoDB is
find_one(). This method returns a
single document matching a query (or None if there are no
matches). It is useful when you know there is only one matching
document, or are only interested in the first match. Here we use
find_one() to get the first
document from the posts collection: The result is a dictionary matching the one that we inserted previously. Note The returned document contains an "_id", which was
automatically added on insert. find_one() also supports querying
on specific elements that the resulting document must match. To limit
our results to a document with author “Mike” we do: If we try with a different author, like “Eliot”, we’ll get no result: We can also find a post by its _id, which in our example is an ObjectId: Note that an ObjectId is not the same as its string representation: A common task in web applications is to get an ObjectId from the
request URL and find the matching document. It’s necessary in this
case to convert the ObjectId from a string before passing it to
find_one: See also When I query for a document by ObjectId in my web application I get no result In order to make querying a little more interesting, let’s insert a
few more documents. In addition to inserting a single document, we can
also perform bulk insert operations, by passing a list as the
first argument to insert_many().
This will insert each document in the list, sending only a single
command to the server: There are a couple of interesting things to note about this example: The result from insert_many() now
returns two ObjectId instances, one for
each inserted document. new_posts[1] has a different “shape” than the other posts -
there is no "tags" field and we’ve added a new field,
"title". This is what we mean when we say that MongoDB is
schema-free. To get more than a single document as the result of a query we use the
find()
method. find() returns a
Cursor instance, which allows us to iterate
over all matching documents. For example, we can iterate over every
document in the posts collection: Just like we did with find_one(),
we can pass a document to find()
to limit the returned results. Here, we get only those documents whose
author is “Mike”: If we just want to know how many documents match a query we can
perform a count_documents() operation
instead of a full query. We can get a count of all of the documents
in a collection: or just of those documents that match a specific query: MongoDB supports many different types of advanced queries. As an
example, lets perform a query where we limit results to posts older
than a certain date, but also sort the results by author: Here we use the special "$lt" operator to do a range query, and
also call sort() to sort the results
by author. Adding indexes can help accelerate certain queries and can also add additional
functionality to querying and storing documents. In this example, we’ll
demonstrate how to create a unique index on a key that rejects
documents whose value for that key already exists in the index. First, we’ll need to create the index: Notice that we have two indexes now: one is the index on _id that MongoDB
creates automatically, and the other is the index on user_id we just
created. Now let’s set up some user profiles: The index prevents us from inserting a document whose user_id is already in
the collection: See also The MongoDB documentation on indexes  import pymongo    from pymongo importMongoClient client=MongoClient()  client=MongoClient("localhost",27017)  client=MongoClient("mongodb://localhost:27017/")  db=client.test_database  db=client["test-database"]  collection=db.test_collection  collection=db["test-collection"]  import datetime post={ "author":"Mike", "text":"My first blog post!", "tags":["mongodb","python","pymongo"], "date":datetime.datetime.now(tz=datetime.timezone.utc), }  posts=db.posts post_id=posts.insert_one(post).inserted_id post_idObjectId('...')  db.list_collection_names()['posts']  import pprint pprint.pprint(posts.find_one()){'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['mongodb', 'python', 'pymongo'], 'text': 'My first blog post!'}  pprint.pprint(posts.find_one({"author":"Mike"})){'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['mongodb', 'python', 'pymongo'], 'text': 'My first blog post!'}  posts.find_one({"author":"Eliot"})   post_idObjectId(...) pprint.pprint(posts.find_one({"_id":post_id})){'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['mongodb', 'python', 'pymongo'], 'text': 'My first blog post!'}  post_id_as_str=str(post_id) posts.find_one({"_id":post_id_as_str})# No result  from bson.objectid importObjectId# The web framework gets post_id from the URL and passes it as a stringdef get(post_id):# Convert from string to ObjectId:document=client.db.collection.find_one({'_id':ObjectId(post_id)})  new_posts=[ { "author":"Mike", "text":"Another post!", "tags":["bulk","insert"], "date":datetime.datetime(2009,11,12,11,14), }, { "author":"Eliot", "title":"MongoDB is fun", "text":"and pretty easy too!", "date":datetime.datetime(2009,11,10,10,45), }, ] result=posts.insert_many(new_posts) result.inserted_ids[ObjectId('...'), ObjectId('...')]  forpostinposts.find(): pprint.pprint(post) {'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['mongodb', 'python', 'pymongo'], 'text': 'My first blog post!'}{'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['bulk', 'insert'], 'text': 'Another post!'}{'_id': ObjectId('...'), 'author': 'Eliot', 'date': datetime.datetime(...), 'text': 'and pretty easy too!', 'title': 'MongoDB is fun'}  forpostinposts.find({"author":"Mike"}): pprint.pprint(post) {'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['mongodb', 'python', 'pymongo'], 'text': 'My first blog post!'}{'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['bulk', 'insert'], 'text': 'Another post!'}  posts.count_documents({})3  posts.count_documents({"author":"Mike"})2  d=datetime.datetime(2009,11,12,12) forpostinposts.find({"date":{"$lt":d}}).sort("author"): pprint.pprint(post) {'_id': ObjectId('...'), 'author': 'Eliot', 'date': datetime.datetime(...), 'text': 'and pretty easy too!', 'title': 'MongoDB is fun'}{'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['bulk', 'insert'], 'text': 'Another post!'}  result=db.profiles.create_index([("user_id",pymongo.ASCENDING)],unique=True) sorted(list(db.profiles.index_information()))['_id_', 'user_id_1']  user_profiles=[{"user_id":211,"name":"Luke"},{"user_id":212,"name":"Ziltoid"}] result=db.profiles.insert_many(user_profiles)  new_profile={"user_id":213,"name":"Drew"} duplicate_profile={"user_id":212,"name":"Tommy"} result=db.profiles.insert_one(new_profile)# This is fine. result=db.profiles.insert_one(duplicate_profile)Traceback (most recent call last):DuplicateKeyErrorE11000 duplicate key error index: test_database.profiles.$user_id_1 dup key: { : 212 }  Prerequisites¶ Before we start, make sure that you have the PyMongo distribution
installed. In the Python shell, the following
should run without raising an exception: This tutorial also assumes that a MongoDB instance is running on the
default host and port. Assuming you have downloaded and installed MongoDB, you
can start it like so:  import pymongo    Making a Connection with MongoClient¶ The first step when working with PyMongo is to create a
MongoClient to the running mongod
instance. Doing so is easy: The above code will connect on the default host and port. We can also
specify the host and port explicitly, as follows: Or use the MongoDB URI format:  from pymongo importMongoClient client=MongoClient()  client=MongoClient("localhost",27017)  client=MongoClient("mongodb://localhost:27017/")  Getting a Database¶ A single instance of MongoDB can support multiple independent
databases. When
working with PyMongo you access databases using attribute style access
on MongoClient instances: If your database name is such that using attribute style access won’t
work (like test-database), you can use dictionary style access
instead:  db=client.test_database  db=client["test-database"]  Getting a Collection¶ A collection is a
group of documents stored in MongoDB, and can be thought of as roughly
the equivalent of a table in a relational database. Getting a
collection in PyMongo works the same as getting a database: or (using dictionary style access): An important note about collections (and databases) in MongoDB is that
they are created lazily - none of the above commands have actually
performed any operations on the MongoDB server. Collections and
databases are created when the first document is inserted into them.  collection=db.test_collection  collection=db["test-collection"]  Documents¶ Data in MongoDB is represented (and stored) using JSON-style
documents. In PyMongo we use dictionaries to represent documents. As
an example, the following dictionary might be used to represent a blog
post: Note that documents can contain native Python types (like
datetime.datetime instances) which will be automatically
converted to and from the appropriate BSON types.  import datetime post={ "author":"Mike", "text":"My first blog post!", "tags":["mongodb","python","pymongo"], "date":datetime.datetime.now(tz=datetime.timezone.utc), }  Inserting a Document¶ To insert a document into a collection we can use the
insert_one() method: When a document is inserted a special key, "_id", is automatically
added if the document doesn’t already contain an "_id" key. The value
of "_id" must be unique across the
collection. insert_one() returns an
instance of InsertOneResult. For more information
on "_id", see the documentation on _id. After inserting the first document, the posts collection has
actually been created on the server. We can verify this by listing all
of the collections in our database:  posts=db.posts post_id=posts.insert_one(post).inserted_id post_idObjectId('...')  db.list_collection_names()['posts']  Getting a Single Document With find_one()¶ The most basic type of query that can be performed in MongoDB is
find_one(). This method returns a
single document matching a query (or None if there are no
matches). It is useful when you know there is only one matching
document, or are only interested in the first match. Here we use
find_one() to get the first
document from the posts collection: The result is a dictionary matching the one that we inserted previously. Note The returned document contains an "_id", which was
automatically added on insert. find_one() also supports querying
on specific elements that the resulting document must match. To limit
our results to a document with author “Mike” we do: If we try with a different author, like “Eliot”, we’ll get no result:  import pprint pprint.pprint(posts.find_one()){'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['mongodb', 'python', 'pymongo'], 'text': 'My first blog post!'}  pprint.pprint(posts.find_one({"author":"Mike"})){'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['mongodb', 'python', 'pymongo'], 'text': 'My first blog post!'}  posts.find_one({"author":"Eliot"})   Querying By ObjectId¶ We can also find a post by its _id, which in our example is an ObjectId: Note that an ObjectId is not the same as its string representation: A common task in web applications is to get an ObjectId from the
request URL and find the matching document. It’s necessary in this
case to convert the ObjectId from a string before passing it to
find_one: See also When I query for a document by ObjectId in my web application I get no result  post_idObjectId(...) pprint.pprint(posts.find_one({"_id":post_id})){'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['mongodb', 'python', 'pymongo'], 'text': 'My first blog post!'}  post_id_as_str=str(post_id) posts.find_one({"_id":post_id_as_str})# No result  from bson.objectid importObjectId# The web framework gets post_id from the URL and passes it as a stringdef get(post_id):# Convert from string to ObjectId:document=client.db.collection.find_one({'_id':ObjectId(post_id)})  Bulk Inserts¶ In order to make querying a little more interesting, let’s insert a
few more documents. In addition to inserting a single document, we can
also perform bulk insert operations, by passing a list as the
first argument to insert_many().
This will insert each document in the list, sending only a single
command to the server: There are a couple of interesting things to note about this example: The result from insert_many() now
returns two ObjectId instances, one for
each inserted document. new_posts[1] has a different “shape” than the other posts -
there is no "tags" field and we’ve added a new field,
"title". This is what we mean when we say that MongoDB is
schema-free.  new_posts=[ { "author":"Mike", "text":"Another post!", "tags":["bulk","insert"], "date":datetime.datetime(2009,11,12,11,14), }, { "author":"Eliot", "title":"MongoDB is fun", "text":"and pretty easy too!", "date":datetime.datetime(2009,11,10,10,45), }, ] result=posts.insert_many(new_posts) result.inserted_ids[ObjectId('...'), ObjectId('...')]  Querying for More Than One Document¶ To get more than a single document as the result of a query we use the
find()
method. find() returns a
Cursor instance, which allows us to iterate
over all matching documents. For example, we can iterate over every
document in the posts collection: Just like we did with find_one(),
we can pass a document to find()
to limit the returned results. Here, we get only those documents whose
author is “Mike”:  forpostinposts.find(): pprint.pprint(post) {'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['mongodb', 'python', 'pymongo'], 'text': 'My first blog post!'}{'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['bulk', 'insert'], 'text': 'Another post!'}{'_id': ObjectId('...'), 'author': 'Eliot', 'date': datetime.datetime(...), 'text': 'and pretty easy too!', 'title': 'MongoDB is fun'}  forpostinposts.find({"author":"Mike"}): pprint.pprint(post) {'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['mongodb', 'python', 'pymongo'], 'text': 'My first blog post!'}{'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['bulk', 'insert'], 'text': 'Another post!'}  Counting¶ If we just want to know how many documents match a query we can
perform a count_documents() operation
instead of a full query. We can get a count of all of the documents
in a collection: or just of those documents that match a specific query:  posts.count_documents({})3  posts.count_documents({"author":"Mike"})2  Range Queries¶ MongoDB supports many different types of advanced queries. As an
example, lets perform a query where we limit results to posts older
than a certain date, but also sort the results by author: Here we use the special "$lt" operator to do a range query, and
also call sort() to sort the results
by author.  d=datetime.datetime(2009,11,12,12) forpostinposts.find({"date":{"$lt":d}}).sort("author"): pprint.pprint(post) {'_id': ObjectId('...'), 'author': 'Eliot', 'date': datetime.datetime(...), 'text': 'and pretty easy too!', 'title': 'MongoDB is fun'}{'_id': ObjectId('...'), 'author': 'Mike', 'date': datetime.datetime(...), 'tags': ['bulk', 'insert'], 'text': 'Another post!'}  Indexing¶ Adding indexes can help accelerate certain queries and can also add additional
functionality to querying and storing documents. In this example, we’ll
demonstrate how to create a unique index on a key that rejects
documents whose value for that key already exists in the index. First, we’ll need to create the index: Notice that we have two indexes now: one is the index on _id that MongoDB
creates automatically, and the other is the index on user_id we just
created. Now let’s set up some user profiles: The index prevents us from inserting a document whose user_id is already in
the collection: See also The MongoDB documentation on indexes  result=db.profiles.create_index([("user_id",pymongo.ASCENDING)],unique=True) sorted(list(db.profiles.index_information()))['_id_', 'user_id_1']  user_profiles=[{"user_id":211,"name":"Luke"},{"user_id":212,"name":"Ziltoid"}] result=db.profiles.insert_many(user_profiles)  new_profile={"user_id":213,"name":"Drew"} duplicate_profile={"user_id":212,"name":"Tommy"} result=db.profiles.insert_one(new_profile)# This is fine. result=db.profiles.insert_one(duplicate_profile)Traceback (most recent call last):DuplicateKeyErrorE11000 duplicate key error index: test_database.profiles.$user_id_1 dup key: { : 212 }  