Connection Examples# Connecting to a default Redis instance, running locally.# By default Redis return binary responses, to decode them use decode_responses=True# import redis r = redis.Redis(protocol=3) rcon.ping() Parameters are passed to the following schems, as parameters to the url scheme. Three URL schemes are supported: redis:// creates a TCP socket connection. https://www.iana.org/assignments/uri-schemes/prov/redis rediss:// creates a SSL wrapped TCP socket connection. https://www.iana.org/assignments/uri-schemes/prov/rediss unix://: creates a Unix Domain Socket connection.  importredisconnection=redis.Redis()connection.ping()    importredisdecoded_connection=redis.Redis(decode_responses=True)decoded_connection.ping()    importredisuser_connection=redis.Redis(host='localhost',port=6380,username='dvora',password='redis',decode_responses=True)user_connection.ping()    importrediscreds_provider=redis.UsernamePasswordCredentialProvider("username","password")user_connection=redis.Redis(host="localhost",port=6379,credential_provider=creds_provider)user_connection.ping()  fromtypingimportTupleimportrediscreds_map={"user_1":"pass_1","user_2":"pass_2"}classUserMapCredentialProvider(redis.CredentialProvider):def__init__(self,username:str):self.username=usernamedefget_credentials(self)->Tuple[str,str]:returnself.username,creds_map.get(self.username)# Create a default connection to set the ACL userdefault_connection=redis.Redis(host="localhost",port=6379)default_connection.acl_setuser("user_1",enabled=True,passwords=["+"+"pass_1"],keys="~*",commands=["+ping","+command","+info","+select","+flushdb"],)# Create a UserMapCredentialProvider instance for user_1creds_provider=UserMapCredentialProvider("user_1")# Initiate user connection with the credential provideruser_connection=redis.Redis(host="localhost",port=6379,credential_provider=creds_provider)user_connection.ping()  fromtypingimportUnionimportredisclassInitCredsSetCredentialProvider(redis.CredentialProvider):def__init__(self,username,password):self.username=usernameself.password=passwordself.call_supplier=Falsedefcall_external_supplier(self)->Union[Tuple[str],Tuple[str,str]]:# Call to an external credential supplierraiseNotImplementedErrordefget_credentials(self)->Union[Tuple[str],Tuple[str,str]]:ifself.call_supplier:returnself.call_external_supplier()# Use the init set only for the first timeself.call_supplier=Truereturnself.username,self.passwordcred_provider=InitCredsSetCredentialProvider(username="init_user",password="init_pass")  importredisimportboto3importjsonimportcachetools.funcclassSecretsManagerProvider(redis.CredentialProvider):def__init__(self,secret_id,version_id=None,version_stage='AWSCURRENT'):self.sm_client=boto3.client('secretsmanager')self.secret_id=secret_idself.version_id=version_idself.version_stage=version_stagedefget_credentials(self)->Union[Tuple[str],Tuple[str,str]]:@cachetools.func.ttl_cache(maxsize=128,ttl=24*60*60)#24hdefget_sm_user_credentials(secret_id,version_id,version_stage):secret=self.sm_client.get_secret_value(secret_id,version_id)returnjson.loads(secret['SecretString'])creds=get_sm_user_credentials(self.secret_id,self.version_id,self.version_stage)returncreds['username'],creds['password']my_secret_id="EXAMPLE1-90ab-cdef-fedc-ba987SECRET1"creds_provider=SecretsManagerProvider(secret_id=my_secret_id)user_connection=redis.Redis(host="localhost",port=6379,credential_provider=creds_provider)user_connection.ping()  fromtypingimportTuple,Unionfromurllib.parseimportParseResult,urlencode,urlunparseimportbotocore.sessionimportredisfrombotocore.modelimportServiceIdfrombotocore.signersimportRequestSignerfromcachetoolsimportTTLCache,cachedclassElastiCacheIAMProvider(redis.CredentialProvider):def__init__(self,user,cluster_name,region="us-east-1"):self.user=userself.cluster_name=cluster_nameself.region=regionsession=botocore.session.get_session()self.request_signer=RequestSigner(ServiceId("elasticache"),self.region,"elasticache","v4",session.get_credentials(),session.get_component("event_emitter"),)# Generated IAM tokens are valid for 15 minutes@cached(cache=TTLCache(maxsize=128,ttl=900))defget_credentials(self)->Union[Tuple[str],Tuple[str,str]]:query_params={"Action":"connect","User":self.user}url=urlunparse(ParseResult(scheme="https",netloc=self.cluster_name,path="/",query=urlencode(query_params),params="",fragment="",))signed_url=self.request_signer.generate_presigned_url({"method":"GET","url":url,"body":{},"headers":{},"context":{}},operation_name="connect",expires_in=900,region_name=self.region,)# RequestSigner only seems to work if the URL has a protocol, but# Elasticache only accepts the URL without a protocol# So strip it off the signed URL before returningreturn(self.user,signed_url.removeprefix("https://"))username="barshaul"cluster_name="test-001"endpoint="test-001.use1.cache.amazonaws.com"creds_provider=ElastiCacheIAMProvider(user=username,cluster_name=cluster_name)user_connection=redis.Redis(host=endpoint,port=6379,credential_provider=creds_provider)user_connection.ping()    url_connection=redis.from_url("redis://localhost:6379?decode_responses=True&health_check_interval=2")url_connection.ping()    url_connection=redis.from_url("redis://localhost:6379?decode_responses=True&health_check_interval=2&protocol=3")url_connection.ping()  fromredis.sentinelimportSentinelsentinel=Sentinel([('localhost',26379)],socket_timeout=0.1)sentinel.discover_master("redis-py-test")  Connecting to a default Redis instance, running locally.# By default Redis return binary responses, to decode them use decode_responses=True# import redis r = redis.Redis(protocol=3) rcon.ping()  importredisconnection=redis.Redis()connection.ping()    importredisdecoded_connection=redis.Redis(decode_responses=True)decoded_connection.ping()    By default Redis return binary responses, to decode them use decode_responses=True#  importredisdecoded_connection=redis.Redis(decode_responses=True)decoded_connection.ping()    By default this library uses the RESP 2 protocol. To enable RESP3, set protocol=3.# import redis r = redis.Redis(protocol=3) rcon.ping()  Connecting to a redis instance, specifying a host and port with credentials.#  importredisuser_connection=redis.Redis(host='localhost',port=6380,username='dvora',password='redis',decode_responses=True)user_connection.ping()    Connecting to a redis instance with username and password credential provider#  importrediscreds_provider=redis.UsernamePasswordCredentialProvider("username","password")user_connection=redis.Redis(host="localhost",port=6379,credential_provider=creds_provider)user_connection.ping()  Connecting to a redis instance with standard credential provider#  fromtypingimportTupleimportrediscreds_map={"user_1":"pass_1","user_2":"pass_2"}classUserMapCredentialProvider(redis.CredentialProvider):def__init__(self,username:str):self.username=usernamedefget_credentials(self)->Tuple[str,str]:returnself.username,creds_map.get(self.username)# Create a default connection to set the ACL userdefault_connection=redis.Redis(host="localhost",port=6379)default_connection.acl_setuser("user_1",enabled=True,passwords=["+"+"pass_1"],keys="~*",commands=["+ping","+command","+info","+select","+flushdb"],)# Create a UserMapCredentialProvider instance for user_1creds_provider=UserMapCredentialProvider("user_1")# Initiate user connection with the credential provideruser_connection=redis.Redis(host="localhost",port=6379,credential_provider=creds_provider)user_connection.ping()  Connecting to a redis instance first with an initial credential set and then calling the credential provider#  fromtypingimportUnionimportredisclassInitCredsSetCredentialProvider(redis.CredentialProvider):def__init__(self,username,password):self.username=usernameself.password=passwordself.call_supplier=Falsedefcall_external_supplier(self)->Union[Tuple[str],Tuple[str,str]]:# Call to an external credential supplierraiseNotImplementedErrordefget_credentials(self)->Union[Tuple[str],Tuple[str,str]]:ifself.call_supplier:returnself.call_external_supplier()# Use the init set only for the first timeself.call_supplier=Truereturnself.username,self.passwordcred_provider=InitCredsSetCredentialProvider(username="init_user",password="init_pass")  Connecting to a redis instance with AWS Secrets Manager credential provider.#  importredisimportboto3importjsonimportcachetools.funcclassSecretsManagerProvider(redis.CredentialProvider):def__init__(self,secret_id,version_id=None,version_stage='AWSCURRENT'):self.sm_client=boto3.client('secretsmanager')self.secret_id=secret_idself.version_id=version_idself.version_stage=version_stagedefget_credentials(self)->Union[Tuple[str],Tuple[str,str]]:@cachetools.func.ttl_cache(maxsize=128,ttl=24*60*60)#24hdefget_sm_user_credentials(secret_id,version_id,version_stage):secret=self.sm_client.get_secret_value(secret_id,version_id)returnjson.loads(secret['SecretString'])creds=get_sm_user_credentials(self.secret_id,self.version_id,self.version_stage)returncreds['username'],creds['password']my_secret_id="EXAMPLE1-90ab-cdef-fedc-ba987SECRET1"creds_provider=SecretsManagerProvider(secret_id=my_secret_id)user_connection=redis.Redis(host="localhost",port=6379,credential_provider=creds_provider)user_connection.ping()  Connecting to a redis instance with ElastiCache IAM credential provider.#  fromtypingimportTuple,Unionfromurllib.parseimportParseResult,urlencode,urlunparseimportbotocore.sessionimportredisfrombotocore.modelimportServiceIdfrombotocore.signersimportRequestSignerfromcachetoolsimportTTLCache,cachedclassElastiCacheIAMProvider(redis.CredentialProvider):def__init__(self,user,cluster_name,region="us-east-1"):self.user=userself.cluster_name=cluster_nameself.region=regionsession=botocore.session.get_session()self.request_signer=RequestSigner(ServiceId("elasticache"),self.region,"elasticache","v4",session.get_credentials(),session.get_component("event_emitter"),)# Generated IAM tokens are valid for 15 minutes@cached(cache=TTLCache(maxsize=128,ttl=900))defget_credentials(self)->Union[Tuple[str],Tuple[str,str]]:query_params={"Action":"connect","User":self.user}url=urlunparse(ParseResult(scheme="https",netloc=self.cluster_name,path="/",query=urlencode(query_params),params="",fragment="",))signed_url=self.request_signer.generate_presigned_url({"method":"GET","url":url,"body":{},"headers":{},"context":{}},operation_name="connect",expires_in=900,region_name=self.region,)# RequestSigner only seems to work if the URL has a protocol, but# Elasticache only accepts the URL without a protocol# So strip it off the signed URL before returningreturn(self.user,signed_url.removeprefix("https://"))username="barshaul"cluster_name="test-001"endpoint="test-001.use1.cache.amazonaws.com"creds_provider=ElastiCacheIAMProvider(user=username,cluster_name=cluster_name)user_connection=redis.Redis(host=endpoint,port=6379,credential_provider=creds_provider)user_connection.ping()    Connecting to Redis instances by specifying a URL scheme.# Parameters are passed to the following schems, as parameters to the url scheme. Three URL schemes are supported: redis:// creates a TCP socket connection. https://www.iana.org/assignments/uri-schemes/prov/redis rediss:// creates a SSL wrapped TCP socket connection. https://www.iana.org/assignments/uri-schemes/prov/rediss unix://: creates a Unix Domain Socket connection.  url_connection=redis.from_url("redis://localhost:6379?decode_responses=True&health_check_interval=2")url_connection.ping()    Connecting to Redis instances by specifying a URL scheme and the RESP3 protocol.#  url_connection=redis.from_url("redis://localhost:6379?decode_responses=True&health_check_interval=2&protocol=3")url_connection.ping()  Connecting to a Sentinel instance#  fromredis.sentinelimportSentinelsentinel=Sentinel([('localhost',26379)],socket_timeout=0.1)sentinel.discover_master("redis-py-test")  