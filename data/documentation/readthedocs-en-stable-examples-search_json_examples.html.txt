Indexing / querying JSON documents# Adding a JSON document to an index# Simple search#  importredisfromredis.commands.json.pathimportPathimportredis.commands.search.aggregationasaggregationsimportredis.commands.search.reducersasreducersfromredis.commands.search.fieldimportTextField,NumericField,TagFieldfromredis.commands.search.indexDefinitionimportIndexDefinition,IndexTypefromredis.commands.search.queryimportNumericFilter,Queryr=redis.Redis(host='localhost',port=6379)user1={"user":{"name":"Paul John","email":"paul.john@example.com","age":42,"city":"London"}}user2={"user":{"name":"Eden Zamir","email":"eden.zamir@example.com","age":29,"city":"Tel Aviv"}}user3={"user":{"name":"Paul Zamir","email":"paul.zamir@example.com","age":35,"city":"Tel Aviv"}}user4={"user":{"name":"Sarah Zamir","email":"sarah.zamir@example.com","age":30,"city":"Paris"}}r.json().set("user:1",Path.root_path(),user1)r.json().set("user:2",Path.root_path(),user2)r.json().set("user:3",Path.root_path(),user3)r.json().set("user:4",Path.root_path(),user4)schema=(TextField("$.user.name",as_name="name"),TagField("$.user.city",as_name="city"),NumericField("$.user.age",as_name="age"))r.ft().create_index(schema,definition=IndexDefinition(prefix=["user:"],index_type=IndexType.JSON))    r.ft().search("Paul")    q1=Query("Paul").add_filter(NumericFilter("age",30,40))r.ft().search(q1)    # Search for all users, returning 2 users at a time and sorting by age in descending orderoffset=0num=2q=Query("*").paging(offset,num).sort_by("age",asc=False)# pass asc=True to sort in ascending orderr.ft().search(q)    q=Query("*").paging(0,0)r.ft().search(q).total    r.ft().search(Query("Paul").return_field("$.user.city",as_field="city")).docs    req=aggregations.AggregateRequest("Paul").sort_by("@age")r.ft().aggregate(req).rows    # The group_by expects a string or list of strings to group the results before applying the aggregation function to# each group. Passing an empty list here acts as `GROUPBY 0` which applies the aggregation function to the whole resultsreq=aggregations.AggregateRequest("*").group_by([],reducers.count().alias("total"))r.ft().aggregate(req).rows    Adding a JSON document to an index#  importredisfromredis.commands.json.pathimportPathimportredis.commands.search.aggregationasaggregationsimportredis.commands.search.reducersasreducersfromredis.commands.search.fieldimportTextField,NumericField,TagFieldfromredis.commands.search.indexDefinitionimportIndexDefinition,IndexTypefromredis.commands.search.queryimportNumericFilter,Queryr=redis.Redis(host='localhost',port=6379)user1={"user":{"name":"Paul John","email":"paul.john@example.com","age":42,"city":"London"}}user2={"user":{"name":"Eden Zamir","email":"eden.zamir@example.com","age":29,"city":"Tel Aviv"}}user3={"user":{"name":"Paul Zamir","email":"paul.zamir@example.com","age":35,"city":"Tel Aviv"}}user4={"user":{"name":"Sarah Zamir","email":"sarah.zamir@example.com","age":30,"city":"Paris"}}r.json().set("user:1",Path.root_path(),user1)r.json().set("user:2",Path.root_path(),user2)r.json().set("user:3",Path.root_path(),user3)r.json().set("user:4",Path.root_path(),user4)schema=(TextField("$.user.name",as_name="name"),TagField("$.user.city",as_name="city"),NumericField("$.user.age",as_name="age"))r.ft().create_index(schema,definition=IndexDefinition(prefix=["user:"],index_type=IndexType.JSON))    Searching# Simple search#  r.ft().search("Paul")    q1=Query("Paul").add_filter(NumericFilter("age",30,40))r.ft().search(q1)    # Search for all users, returning 2 users at a time and sorting by age in descending orderoffset=0num=2q=Query("*").paging(offset,num).sort_by("age",asc=False)# pass asc=True to sort in ascending orderr.ft().search(q)    q=Query("*").paging(0,0)r.ft().search(q).total    r.ft().search(Query("Paul").return_field("$.user.city",as_field="city")).docs    Simple search#  r.ft().search("Paul")    Filtering search results#  q1=Query("Paul").add_filter(NumericFilter("age",30,40))r.ft().search(q1)    Paginating and Ordering search Results#  # Search for all users, returning 2 users at a time and sorting by age in descending orderoffset=0num=2q=Query("*").paging(offset,num).sort_by("age",asc=False)# pass asc=True to sort in ascending orderr.ft().search(q)    Counting the total number of Items#  q=Query("*").paging(0,0)r.ft().search(q).total    Projecting using JSON Path expressions#  r.ft().search(Query("Paul").return_field("$.user.city",as_field="city")).docs    Aggregation# Count the total number of Items#  req=aggregations.AggregateRequest("Paul").sort_by("@age")r.ft().aggregate(req).rows    # The group_by expects a string or list of strings to group the results before applying the aggregation function to# each group. Passing an empty list here acts as `GROUPBY 0` which applies the aggregation function to the whole resultsreq=aggregations.AggregateRequest("*").group_by([],reducers.count().alias("total"))r.ft().aggregate(req).rows    Count the total number of Items#  # The group_by expects a string or list of strings to group the results before applying the aggregation function to# each group. Passing an empty list here acts as `GROUPBY 0` which applies the aggregation function to the whole resultsreq=aggregations.AggregateRequest("*").group_by([],reducers.count().alias("total"))r.ft().aggregate(req).rows    